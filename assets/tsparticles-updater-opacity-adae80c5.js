import{c as a,a3 as o,B as e,I as t}from"./tsparticles-engine-1e3d91c8.js";class i{constructor(a){this.container=a}init(a){const i=a.options.opacity;a.opacity=o(i,1);const s=i.animation;s.enable&&(a.opacity.velocity=e(s.speed)/100*this.container.retina.reduceFactor,s.sync||(a.opacity.velocity*=t()))}isEnabled(a){return!a.destroyed&&!a.spawning&&!!a.opacity&&a.opacity.enable&&((a.opacity.maxLoops??0)<=0||(a.opacity.maxLoops??0)>0&&(a.opacity.loops??0)<(a.opacity.maxLoops??0))}reset(a){a.opacity&&(a.opacity.time=0,a.opacity.loops=0)}update(o,e){this.isEnabled(o)&&function(o,e){const t=o.opacity;if(o.destroyed||!(null==t?void 0:t.enable)||(t.maxLoops??0)>0&&(t.loops??0)>(t.maxLoops??0))return;const i=t.min,s=t.max,c=t.decay??1;if(t.time||(t.time=0),(t.delayTime??0)>0&&t.time<(t.delayTime??0)&&(t.time+=e.value),!((t.delayTime??0)>0&&t.time<(t.delayTime??0))){switch(t.status){case"increasing":t.value>=s?(t.status="decreasing",t.loops||(t.loops=0),t.loops++):t.value+=(t.velocity??0)*e.factor;break;case"decreasing":t.value<=i?(t.status="increasing",t.loops||(t.loops=0),t.loops++):t.value-=(t.velocity??0)*e.factor}t.velocity&&1!==t.decay&&(t.velocity*=c),function(a,o,e,t){switch(a.options.opacity.animation.destroy){case"max":o>=t&&a.destroy();break;case"min":o<=e&&a.destroy()}}(o,t.value,i,s),o.destroyed||(t.value=a(t.value,i,s))}}(o,e)}}async function s(a,o=!0){await a.addParticleUpdater("opacity",(a=>new i(a)),o)}export{s as l};
